MacPlot(mac, plot.by = "Mac", split.by = "Sample")
MacPlot(mac, plot.by = "Mac")
mac <- x(mac)
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
mac_efsd <- mac
dat <- as.data.frame(mac_efsd@MacPolarizeR$SingleCell)
plot.by <- "Sample"
dat[,plot.by] <- mac_efsd@MetaData[[plot.by]]
plot.by <- "Cluster"
dat[,plot.by] <- mac_efsd@MetaData[[plot.by]]
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
library(ggplot2)
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
mac_color <- c("Monocytes"="#3468C0",
"PVM"="#86A7FC",
"LAM"="#FF9843",
"P_LAM"="#FFDD95")
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
#ggplot(dat, aes(x=(dat[,1]/dat[,2]), y=LAM)) +
ggplot(dat, aes(x=(dat[,1]/dat[,2]), y=LAM)) +
labs(x="Inflammation", y="Foaming") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 0.5, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = Cells, fill = Cells), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = Cluster), size=2) +
scale_x_continuous(limits = c(0.01, 1.8)) +
#scale_color_manual(values = mac_color) +
facet_grid(rows = vars(Sample), cols = vars(Cluster))
dat
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
###################################################################################################################
# GRAFICI MACANALYZER AGGIUNTIVI
bey <- readRDS("~/Documenti/MACanalyzeR/B_MacPolarizeR/A_DatasetSC_MACSPECTRUM/mac012_adj.RDS")
mac_bey <- CreateMacObj(bey, "Sample", "Sample", "tsne")
mac_bey <- x(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
mac_bey <- x(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
PathHeat
MacPlot
MacBarplot
MacBarplot()
MacBarplot
install.packages("Documenti/MACanalyzeR/MACanalyzer.tar.gz")
library(MACanalyzeR)
mac <- CreateMacObj(readRDS("Documenti/EFSD_pt2/Macrophages.rds"))
mac <- CreateMacObj(readRDS("Documenti/EFSD_pt2/Macrophages.rds"), "Sample", "Cells")
MacPlot(mac)
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
mac <- MacPolarizeR2(mac)
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
t <- readRDS("Documenti/EFSD_pt2/annotato.rds")
library(Seurat)
FeaturePlot(t, c("Rora", "Rorb"))
FeaturePlot(t, c("Rora", "Rorb"), split.by = "Sample")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
create_barplot_with_error(f, "Var1", "value", col=c("blue"))
# Crea il barplot con le barre di errore
p <- ggplot(data, aes_string(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes_string(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
library(ggplot)
library(ggplot2)
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value")
return(p)
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
return(p)
}
create_barplot_with_error(f, "Var1", "value")
View(f)
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error(f, "Var1", "value", fill="blue")
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = data[,group_col], y = data[,value_col])) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value", col="blue")
f <- data.frame("value"= rnorm(n = 50, mean = 10),
"Var1" = rep(c("a","b"), times=50))
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
library(MACanalyzeR)
library(clusterProfiler)
library(org.Mm.eg.db)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
prot <- openxlsx::read.xlsx("Scaricati/proteomics_results_Lettieri_3.xlsx")
View(prot)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
up <- prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
View(k@result)
up <- prot[which(prot[,40]=="+" & prot[,39]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
quattro_up
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
tre_up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
quattro_up
tre_up
tre_up <- prot[which(prot[,45]=="+" & prot[,44]>0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
tot_color_sample <-c("wt"="#E69F00", "hfd"="#56B4E9", "db/db"="#009E73")
library(Seurat)
library(MACanalyzeR)
library(dittoSeq)
library(ggplot2)
mac <- readRDS("Documenti/EFSD_MACanalyzeR/Macrophages.rds")
DimPlot(mac)
########################################################
## MACanalyzeR
########################################################
library(MACanalyzeR)
tot_color_sample <-c("wt"="#E69F00", "hfd"="#56B4E9", "db/db"="#009E73")
mac_color <- c("Monocytes"="#3468C0",
"PVM"="#86A7FC",
"LAM"="#FF9843",
"P_LAM"="#FFDD95")
mac_efsd <- CreateMacObj(mac, "Sample", "Cells")
MacPlot(mac_efsd, col = mac_color, split.by = "Sample")
mac_efsd@MetaData$Sample <- factor(mac_efsd@MetaData$Sample, levels = c("wt", "hfd", "db/db"))
mac_efsd <- FoamSpotteR(mac_efsd)
FoamPlot(mac_efsd)
FoamPlot(mac_efsd, split.by = "Sample", ncol = 3)
mac_efsd <- MacPolarizeR(mac_efsd)
MacRadar(mac_efsd, plot.by = "Sample")
MacPlot(mac_efsd, plot.by = "Mac", split.by = "Sample")
plot.by <- "Sample"
dat <- as.data.frame(mac_efsd@MacPolarizeR$SingleCell)
plot.by <- "Cluster"
dat[,plot.by] <- mac_efsd@MetaData[[plot.by]]
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color)
dat[,3]
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,4], fill = dat[,4]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
dat$Sample
dat <- as.data.frame(mac_efsd@MacPolarizeR$SingleCell)
plot.by <- "Sample"
dat[,plot.by] <- mac_efsd@MetaData[[plot.by]]
plot.by <- "Cluster"
dat[,plot.by] <- mac_efsd@MetaData[[plot.by]]
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,4], fill = dat[,4]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = tot_color_sample)+
facet_wrap(~Sample)
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = tot_color_sample)+
facet_wrap(~Sample)
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3, show.legend = F) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = tot_color_sample)+
facet_wrap(~Sample)
MacPlot(mac_efsd, plot.by = "Mac", split.by = "Sample")
MacPlot(mac_efsd, plot.by = "Mac", split.by = "Sample") + NoLegend()
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(grid)
setwd("~/Documenti/MACanalyzeR/hfd_bulk_GSE112740/")
##################
# LOAD DATA
##################
#LOAD DATA FROM TSV
data <- read.table('countMatrix.txt', header = T)
head(data)
colSums(data[,3:ncol(data)])
#CREATE MATRIX
countdata <- as.matrix(data[,c(6:8,3:5)])
head(countdata)
mode(countdata) <- "integer"
rownames(countdata) <- matrix(unlist(strsplit(data$Geneid, '[.]')),ncol=2,byrow=T)[,1]
rownames(countdata) <- data$gene_name
head(countdata)
setwd("~/GitHub/MACanalyzeR_MaterialsMethods/Analysis_RNAseq/GSE112740_BAT_HFD/")
fit_db <- lm(Trem2 ~ Podn, data = countdata)
fit_db <- lm(Trem2 ~ Podn, data = as.data.frame(countdata))
as.data.frame(countdata)
fit_db <- lm(Trem2 ~ Podn, data = as.data.frame(t(countdata)))
drop1(fit_db, test = "Chisq")
performance::check_model(fit_db)
visreg::visreg(fit_db, xvar = "Adaptive_Thermogenesis")
visreg::visreg(fit_db, xvar = "Trem2")
visreg::visreg(fit_db)
plot(fit_db)
visreg::visreg(fit_db, xvar = "Podn")
fit_db$coefficients
fit_db <- lm(Trem2 ~ Podn -1, data = as.data.frame(t(countdata)))
drop1(fit_db, test = "Chisq")
performance::check_model(fit_db)
visreg::visreg(fit_db, xvar = "Podn")
visreg::visreg(fit = fit_db, xvar = "Podn")
visreg::visreg(fit = fit_db)
visreg::visreg(fit = fit_db, xvar = "Trem2")
plot(fit_db)
fit_db <- lm(Trem2 ~ Podn, data = as.data.frame(t(countdata)))
drop1(fit_db, test = "Chisq")
fit_db <- lm(Trem2 ~ Podn + Lum, data = as.data.frame(t(countdata)))
drop1(fit_db, test = "Chisq")
performance::check_model(fit_db)
visreg::visreg(fit = fit_db, xvar = "Trem2")
visreg::visreg(fit = fit_db, xvar = "Podn")
plot(fit_db)
fit_db <- lm(Trem2 ~ Lum, data = as.data.frame(t(countdata)))
drop1(fit_db, test = "Chisq")
fit_db <- lm(Trem2 ~ Podn, data = as.data.frame(t(countdata)))
drop1(fit_db, test = "Chisq")
fit_db
plot(fit_db)
