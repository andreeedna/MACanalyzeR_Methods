gg_mat <- reshape2::melt(fc_mat)
gg_mat$pval <- reshape2::melt(pval_mat)[,"value"]
gg_mat <- reshape2::melt(fc_mat)
pval_mat <- cbind(res_rosi[comm,"padj"], res_il4[comm,"padj"])
star_mat <- matrix(cut(pval_mat, breaks=c(-Inf, 0.001, 0.01, 0.05, Inf), label=c("***", "**", "*", " ")), ncol = 2, byrow = F)
gg_mat <- reshape2::melt(fc_mat)
gg_mat$pval <- reshape2::melt(pval_mat)[,"value"]
gg_mat$stars <- cut(gg_mat$pval, breaks=c(-Inf, 0.001, 0.01, 0.05, Inf), label=c("***", "**", "*", ""))
##
ggplot(aes(x=Var2, y=Var1, fill=value), data=gg_mat) +
geom_tile() + scale_fill_gradient2(high="#D7191C", mid="white", low="#2C7BB6") +
#   geom_text(aes(label=stars, color=value), size=8) + scale_colour_gradient(low="grey30", high="white", guide="none") +
geom_text(aes(label=stars), color="black", size=5) +
labs(y=NULL, x=NULL, fill="log2FC") +
theme_minimal() + theme(axis.text.x=element_text(angle = -45, hjust = 0, size=12), axis.text.y=element_text(size=12))
colnames(fc_mat) <- c("Rosi-PpargKOvsWT", "Il4-PpargKOvsWT")
pval_mat <- cbind(res_rosi[comm,"padj"], res_il4[comm,"padj"])
star_mat <- matrix(cut(pval_mat, breaks=c(-Inf, 0.001, 0.01, 0.05, Inf), label=c("***", "**", "*", " ")), ncol = 2, byrow = F)
gg_mat <- reshape2::melt(fc_mat)
gg_mat$pval <- reshape2::melt(pval_mat)[,"value"]
gg_mat$stars <- cut(gg_mat$pval, breaks=c(-Inf, 0.001, 0.01, 0.05, Inf), label=c("***", "**", "*", ""))
##
ggplot(aes(x=Var2, y=Var1, fill=value), data=gg_mat) +
geom_tile() + scale_fill_gradient2(high="#D7191C", mid="white", low="#2C7BB6") +
#   geom_text(aes(label=stars, color=value), size=8) + scale_colour_gradient(low="grey30", high="white", guide="none") +
geom_text(aes(label=stars), color="black", size=5) +
labs(y=NULL, x=NULL, fill="log2FC") +
theme_minimal() + theme(axis.text.x=element_text(angle = -45, hjust = 0, size=12), axis.text.y=element_text(size=12))
library(DESeq2)
gc()
library(DESeq2)
library(ggplot2)
library(tidyverse)
library(pheatmap)
library(clusterProfiler)
library(org.Mm.eg.db)
setwd("~/Documenti/COLD/B_RNAseq_COLD_eLife/")
score_calculation <- function(norm, genes, cond) {
genes <- intersect(genes, rownames(norm))
sample_mean <- apply(norm[genes,], 1, function(x)by(x, cond, mean))
ratio_expr <- t(sample_mean) / colMeans(sample_mean)
gene_weight <- apply(norm[genes,], 1, var)
score <- apply(ratio_expr, 2, function(x) weighted.mean(x, gene_weight/sum(gene_weight)))
return(score)
}
single_score_calculation <- function(norm, genes, cond) {
genes <- intersect(genes, rownames(norm))
sample_mean <- apply(norm[genes,], 1, function(x)by(x, cond, mean))
ratio_expr <- norm[genes,] / colMeans(sample_mean)
gene_weight <- apply(norm[genes,], 1, var)
single_score <- apply(ratio_expr, 2, function(x) weighted.mean(x, gene_weight/sum(gene_weight)))
return(single_score)
}
##################
# LOAD DATA
##################
#LOAD DATA FROM TSV
data <- read.table('GSE207705_Quantseq_DataMatrix.csv', header = T, sep=",")
head(data)
cold_countdata <- as.matrix(data[,-1])
head(cold_countdata)
symb <- read.table('SYM.csv', header = F, sep="\t")
head(symb)
rownames(cold_countdata) <- symb$V2
head(cold_countdata)
cold_countdata <- cold_countdata[-grep("^Gm[0-9]", rownames(cold_countdata)), ]
cold_countdata <- cold_countdata[-grep("Rik", rownames(cold_countdata)), ]
rm(symb, data)
#############################
# DIFFERENTIAL GENE EXPRESSION with DESeq2
#############################
# CREATE COLDATA WITH CONDITIONS
cold_condition <- factor(rep(c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"),
times =c(5,5,5,5,5,5,5)))
# CREATE DESEQ2 OBJ
cold_dds <- DESeqDataSetFromMatrix(
countData = cold_countdata,
colData = as.data.frame(cold_condition),
design = ~ cold_condition
)
# SET REFERENCE SAMPLES
cold_dds$cold_condition <- relevel(cold_dds$cold_condition, ref = "RT")
# RUN DESEQ2 PLOTS
cold_dds <- DESeq(cold_dds)
resultsNames(cold_dds)
cold_dds <- estimateSizeFactors(cold_dds)
sizeFactors(cold_dds)
## NORMALIZED COUNTS
cold_norm <- counts(cold_dds, normalized=TRUE)
############################
## QUALITY CONTROL
############################
# PCA how sample clusters
vsdata <- vst(cold_dds, blind=FALSE)
DESeq2::plotPCA(vsdata, intgroup="cold_condition")
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_BIOSYNTHETIC_PROCESS, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
pheatmap(rbind(Biosyntheis_score), cluster_rows = F, cluster_cols = F, color = viridis::viridis(100), border_color = F)
##
x <- apply(cold_norm[c("Trem2", "Pparg", "Ppara", "Cebpb"),], 1, function(x)by(x,cold_condition,mean))
x <- x[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"),]
x <- cbind(thermo_score_comm, x, Biosyntheis_score)
y <- reshape2::melt(x[,])
##################
# RESULTS - DEGs
##################
# 6h
res_6h <- results(cold_dds, contrast = c("cold_condition", "Cold_6h", "RT"))
res_6h <- res_6h[which(res_6h$padj < 0.05),]
res_6h <- res_6h[order(res_6h$log2FoldChange, decreasing = T),]
head(res_6h)
# 1day
res_1d <- results(cold_dds, contrast = c("cold_condition", "Cold_1day", "RT"))
res_1d <- res_1d[which(res_1d$padj < 0.05),]
res_1d <- res_1d[order(res_1d$log2FoldChange, decreasing = T),]
head(res_1d)
# 2days
res_2d <- results(cold_dds, contrast = c("cold_condition", "Cold_2days", "RT"))
res_2d <- res_2d[which(res_2d$padj < 0.05),]
res_2d <- res_2d[order(res_2d$log2FoldChange, decreasing = T),]
head(res_2d)
# 3days
res_3d <- results(cold_dds, contrast = c("cold_condition", "Cold_3days", "RT"))
res_3d <- res_3d[which(res_3d$padj < 0.05),]
res_3d <- res_3d[order(res_3d$log2FoldChange, decreasing = T),]
head(res_3d)
# 4days
res_4d <- results(cold_dds, contrast = c("cold_condition", "Cold_4days", "RT"))
res_4d <- res_4d[which(res_4d$padj < 0.05),]
res_4d <- res_4d[order(res_4d$log2FoldChange, decreasing = T),]
head(res_4d)
# 5days
res_5d <- results(cold_dds, contrast = c("cold_condition", "Cold_5days", "RT"))
res_5d <- res_5d[which(res_5d$padj < 0.05),]
res_5d <- res_5d[order(res_5d$log2FoldChange, decreasing = T),]
head(as.data.frame(res_5d), 50)
#### GENE SIGNATURES
soglia <- 1
uno <- rownames(res_1d[which(res_1d$log2FoldChange>soglia),])
due <- rownames(res_2d[which(res_2d$log2FoldChange>soglia),])
tre <- rownames(res_3d[which(res_3d$log2FoldChange>soglia),])
quattro <- rownames(res_4d[which(res_4d$log2FoldChange>soglia),])
cinque <- rownames(res_5d[which(res_5d$log2FoldChange>soglia),])
sei <- rownames(res_6h[which(res_6h$log2FoldChange>soglia),])
comm <- intersect(intersect(intersect(intersect(intersect(uno, due), tre), quattro), cinque), sei)
pheatmap(cold_norm[comm,], scale = "row", cluster_cols = F, cluster_rows = T, show_rownames = F,
color = colorRampPalette(c("green3", "black", "red"))(100))
k_comm <- enrichGO(comm, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "BP")
## ThermoScore CommGenes
thermo_score_comm <- score_calculation(cold_norm, comm, cold_condition)
thermo_score_comm <- thermo_score_comm[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
pheatmap(rbind(thermo_score_comm), cluster_rows = F, cluster_cols = F, color = viridis::viridis(100), border_color = F)
##
x <- apply(cold_norm[c("Trem2", "Pparg", "Ppara", "Cebpb"),], 1, function(x)by(x,cold_condition,mean))
x <- x[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"),]
x <- cbind(thermo_score_comm, x, Biosyntheis_score)
y <- reshape2::melt(x[,])
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(size=4, show.legend = F) +
geom_line(aes(group = Var2), show.legend = F) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
##
x <- apply(cold_norm[c("Trem2"),], 1, function(x)by(x,cold_condition,mean))
x <- x[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"),]
##
x <- apply(cold_norm[c("Trem2", "Pparg"),], 1, function(x)by(x,cold_condition,mean))
x <- x[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"),]
x <- cbind(thermo_score_comm, x, Biosyntheis_score)
y <- reshape2::melt(x[,])
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(size=4, show.legend = F) +
geom_line(aes(group = Var2), show.legend = F) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_CATABOLIC_PROCESS, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
pheatmap(rbind(Biosyntheis_score), cluster_rows = F, cluster_cols = F, color = viridis::viridis(100), border_color = F)
##
x <- apply(cold_norm[c("Trem2", "Pparg"),], 1, function(x)by(x,cold_condition,mean))
x <- x[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"),]
x <- cbind(thermo_score_comm, x, Biosyntheis_score)
y <- reshape2::melt(x[,])
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(size=4, show.legend = F) +
geom_line(aes(group = Var2), show.legend = F) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
y <- reshape2::melt(cbind(Biosyntheis_score,Catabolic_score))
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_CATABOLIC_PROCESS, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
Catabolic_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_CATABOLIC_PROCESS, cold_condition)
Catabolic_score <- Catabolic_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
y <- reshape2::melt(cbind(Biosyntheis_score,Catabolic_score))
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(data = z, size = 2, aes(x=Var1, y=value, colour = Var2)) +
geom_line(aes(group = Var2)) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(data = y, size = 2, aes(x=Var1, y=value, colour = Var2)) +
geom_line(aes(group = Var2)) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_goBROWN_FAT_CELL_DIFFERENTIATION, cold_condition)
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$BROWN_FAT_CELL_DIFFERENTIATION, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
y <- reshape2::melt(cbind(Biosyntheis_score,Catabolic_score))
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(data = y, size = 2, aes(x=Var1, y=value, colour = Var2)) +
geom_line(aes(group = Var2)) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
#######################
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_BIOSYNTHETIC_PROCESS, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
y <- reshape2::melt(cbind(Biosyntheis_score,Catabolic_score))
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(data = y, size = 2, aes(x=Var1, y=value, colour = Var2)) +
geom_line(aes(group = Var2)) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
#######################
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$LIPID_BIOSYNTHETIC_PROCESS, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
Catabolic_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$LIPID_CATABOLIC_PROCESS, cold_condition)
Catabolic_score <- Catabolic_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
y <- reshape2::melt(cbind(Biosyntheis_score,Catabolic_score))
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(data = y, size = 2, aes(x=Var1, y=value, colour = Var2)) +
geom_line(aes(group = Var2)) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
#######################
Biosyntheis_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_BIOSYNTHETIC_PROCESS, cold_condition)
Biosyntheis_score <- Biosyntheis_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
Catabolic_score <- score_calculation(cold_norm, MACanalyzeR::mouse_go$FATTY_ACID_CATABOLIC_PROCESS, cold_condition)
Catabolic_score <- Catabolic_score[c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days")]
y <- reshape2::melt(cbind(Biosyntheis_score,Catabolic_score))
y$Var1 <- factor(y$Var1, levels = c("RT", "Cold_6h", "Cold_1day", "Cold_2days", "Cold_3days", "Cold_4days", "Cold_5days"))
ggplot(y, aes(x=Var1, y=value, colour = Var2)) +
geom_point(data = y, size = 2, aes(x=Var1, y=value, colour = Var2)) +
geom_line(aes(group = Var2)) +
theme_minimal() +
facet_wrap(~Var2, scales = "free", ncol = 1)
setwd("/media/andrea/Elements/Bio_Backup/proj_psoriasis/bulk_human/10Sample/")
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
setwd("/media/andrea/Elements/Bio_Backup/proj_psoriasis/bulk_human/10Sample/")
##################
# LOAD data10
##################
data10 <- read.table('countMatrix.txt', header = T)
head(data10)
#CREATE MATRIX
countdata10 <- as.matrix(data10[,8:17])
head(countdata10)
mode(countdata10) <- "integer"
rownames(countdata10) <- matrix(unlist(strsplit(data10$Geneid, '[.]')),ncol=2,byrow=T)[,1]
rownames(countdata10) <- data10$gene_name
countdata10
#countdata10 <- countdata10[,-c(1,7,8,5)]
countdata10 <- countdata10[,-c(2,7,8,3)]
head(countdata10)
#############################
# DIFFERENTIAL GENE EXPRESSION with DESeq2
#############################
# CREATE COLDATA WITH CONDITIONS
condition <- factor(rep(c("CTRL", "PSO"), times =c(3,3)))
# CREATE DESEQ2 OBJ
dds10 <- DESeqDataSetFromMatrix(
countData = countdata10,
colData = as.data.frame(condition),
design = ~ condition
)
# SET REFERENCE SAMPLES
dds10$condition <- relevel(dds10$condition, ref = "CTRL")
# RUN DESEQ2 PLOTS
dds10 <- DESeq(dds10)
resultsNames(dds10)
dds10 <- estimateSizeFactors(dds10)
sizeFactors(dds10)
## NORMALIZED COUNTS
norm10 <- counts(dds10, normalized=TRUE)
############################
## QUALITY CONTROL
############################
# PCA how sample clusters
vsdata10 <- vst(dds10, blind=FALSE)
plotPCA(vsdata10) + geom_label_repel(aes(label = colnames(countdata10)))
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
setwd("/media/andrea/Elements/Bio_Backup/proj_psoriasis/bulk_human/9Sample/")
##################
# LOAD data9
##################
#LOAD data9 FROM TSV
data9 <- read.table('countMatrix.txt', header = T)
head(data9)
colSums(data9[,8:16])
#CREATE MATRIX
countdata9 <- as.matrix(data9[,8:16])
head(countdata9)
mode(countdata9) <- "integer"
rownames(countdata9) <- matrix(unlist(strsplit(data9$Geneid, '[.]')),ncol=2,byrow=T)[,1]
rownames(countdata9) <- data9$gene_name
countdata9
countdata9 <- countdata9[,-c(4,8,9)]
head(countdata9)
#############################
# DIFFERENTIAL GENE EXPRESSION with DESeq2
#############################
# CREATE COLDATA WITH CONDITIONS
condition <- factor(rep(c("CTRL", "DMF"), times =c(3,3)))
condition <- factor(rep(c("CTRL", "DMF"), times =c(4,5)))
# CREATE DESEQ2 OBJ
dds9 <- DESeqDataSetFromMatrix(
countData = countdata9,
colData = as.data.frame(condition),
design = ~condition
)
# SET REFERENCE SAMPLES
dds9$condition9 <- relevel(dds9$condition, ref = "CTRL")
# RUN DESEQ2 PLOTS
dds9 <- DESeq(dds9)
resultsNames(dds9)
dds9 <- estimateSizeFactors(dds9)
sizeFactors(dds9)
## NORMALIZED COUNTS
norm9 <- counts(dds9, normalized=TRUE)
############################
## QUALITY CONTROL
############################
# PCA how sample clusters
vsdata9 <- vst(dds9, blind=FALSE)
DESeq2::plotPCA(vsdata9, intgroup="condition9")
##################
# LOAD data9
##################
#LOAD data9 FROM TSV
data9 <- read.table('countMatrix.txt', header = T)
head(data9)
colSums(data9[,8:16])
#CREATE MATRIX
countdata9 <- as.matrix(data9[,8:16])
head(countdata9)
mode(countdata9) <- "integer"
rownames(countdata9) <- matrix(unlist(strsplit(data9$Geneid, '[.]')),ncol=2,byrow=T)[,1]
rownames(countdata9) <- data9$gene_name
countdata9
countdata9 <- countdata9[,-c(4,8,9)]
head(countdata9)
#############################
# DIFFERENTIAL GENE EXPRESSION with DESeq2
#############################
# CREATE COLDATA WITH CONDITIONS
condition <- factor(rep(c("CTRL", "DMF"), times =c(3,3)))
# CREATE DESEQ2 OBJ
dds9 <- DESeqDataSetFromMatrix(
countData = countdata9,
colData = as.data.frame(condition),
design = ~condition
)
# SET REFERENCE SAMPLES
dds9$condition9 <- relevel(dds9$condition, ref = "CTRL")
# RUN DESEQ2 PLOTS
dds9 <- DESeq(dds9)
resultsNames(dds9)
dds9 <- estimateSizeFactors(dds9)
sizeFactors(dds9)
## NORMALIZED COUNTS
norm9 <- counts(dds9, normalized=TRUE)
############################
## QUALITY CONTROL
############################
# PCA how sample clusters
vsdata9 <- vst(dds9, blind=FALSE)
DESeq2::plotPCA(vsdata9, intgroup="condition9")
#CREATE MATRIX
countdata9 <- as.matrix(data9[,8:16])
head(countdata9)
mode(countdata9) <- "integer"
rownames(countdata9) <- matrix(unlist(strsplit(data9$Geneid, '[.]')),ncol=2,byrow=T)[,1]
rownames(countdata9) <- data9$gene_name
countdata9
condition <- factor(rep(c("CTRL", "DMF"), times =c(4,5)))
# CREATE DESEQ2 OBJ
dds9 <- DESeqDataSetFromMatrix(
countData = countdata9,
colData = as.data.frame(condition),
design = ~condition
)
# SET REFERENCE SAMPLES
dds9$condition9 <- relevel(dds9$condition, ref = "CTRL")
# RUN DESEQ2 PLOTS
dds9 <- DESeq(dds9)
resultsNames(dds9)
dds9 <- estimateSizeFactors(dds9)
sizeFactors(dds9)
## NORMALIZED COUNTS
norm9 <- counts(dds9, normalized=TRUE)
############################
## QUALITY CONTROL
############################
# PCA how sample clusters
vsdata9 <- vst(dds9, blind=FALSE)
DESeq2::plotPCA(vsdata9, intgroup="condition9")
load("~/Documenti/PIG/Pig_Heart_MPC.Robj")
DimPlot(Pig_Heart_MPC)
library(Seurat)
DimPlot(Pig_Heart_MPC)
library(MACanalyzeR)
mac <- CreateMacObj(Pig_Heart_MPC, "Condition", org = "hs")
mac <- CreateMacObj(Pig_Heart_MPC, "Condition", "Cluster_annotation", org = "hs")
MacPlot(mac)
mac <- FoamSpotteR(mac)
cold <- readRDS("Documenti/COLD/C_SingleCellCold/elife_dicembre2023.rds")
library(Seurat)
DimPlot(cold)
FeaturePlot(cold, "Pparg", pt.size = 2, max.cutoff = "q95")
FeaturePlot(cold, "Pparg", pt.size = 2, max.cutoff = "q95", order = T)
library(ggplot2)
FeaturePlot(cold, "Pparg", pt.size = 2, max.cutoff = "q95", order = T, split.by = "Sample") & scale_color_viridis_c()
FeaturePlot(cold, "Pparg", pt.size = 2, max.cutoff = "q90", order = T, split.by = "Sample") & scale_color_viridis_c()
library(MACanalyzeR)
mac <- CreateMacObj(cold, id = "Cells")
MacPlot(mac)
mac <- PathAnalyzeR()
mac <- PathAnalyzeR(mac)
mac <- FoamSpotteR(mac)
mac <- PathAnalyzeR(mac)
mac <- MacPolarizeR(mac)
FoamPlot(mac)
FoamPlot(mac, split.by = "Sample")
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
PathDisplay(mac)
PathPlot(mac, 13)
PathPlot(mac, 13, max.cutoff = 2.5)
PathPlot(mac, 13, max.cutoff = 2.5, split.by = "Sample")
PathPlot(mac, 13, max.cutoff = 2.5, split.by = "Sample", ncol = 3)
PathViolin(mac, 13)
mac <- PathAnalyzeR(mac, meta = "Sample")
PathViolin(mac, 13, plot.by = "Sample")
library(Seurat)
tot <- readRDS("Documenti/EFSD_MACanalyzeR/annotato.rds")
FeaturePlot(tot, "Slc44a1", max.cutoff = "q95", pt.size = 2, order = T, split.by = "Sample")
library(tidyverse)
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(clusterProfiler)
library(org.Mm.eg.db)
setwd("GitHub/MACanalyzeR_MaterialsMethods/Analysis_RNAseq/GSE_PpargKOrosi/")
setwd("GitHub/MACanalyzeR_MaterialsMethods/Analysis_RNAseq/GSE_PpargKOrosi/")
setwd("GitHub/MACanalyzeR_MaterialsMethods/Analysis_RNAseq/GSE111105_PpargKO_Il4_Rosi/")
##################
# LOAD DATA
##################
#LOAD DATA FROM TSV
data <- read.table('countMatrix.txt', header = T)
head(data)
colSums(data[,3:ncol(data)])
#CREATE MATRIX
countdata <- as.matrix(data[,c(22:25,30:33,26:29,7:10,15:17,11:14)])
countdata
head(countdata)
mode(countdata) <- "integer"
rownames(countdata) <- matrix(unlist(strsplit(data$Geneid, '[.]')),ncol=2,byrow=T)[,1]
rownames(countdata) <- data$gene_name
head(countdata)
#############################
# DIFFERENTIAL GENE EXPRESSION with DESeq2
#############################
# CREATE COLDATA WITH CONDITIONS
condition <- factor(rep(c("WT_DMSO", "WT_Rosi", "WT_IL4", "PPARGko_DMSO", "PPARGko_Rosi", "PPARGko_IL4"),
times =c(4,4,4,4,3,4)))
# CREATE DESEQ2 OBJ
dds <- DESeqDataSetFromMatrix(
countData = countdata,
colData = as.data.frame(condition),
design = ~ condition
)
# SET REFERENCE SAMPLES
dds$condition <- relevel(dds$condition, ref = "WT_DMSO")
# RUN DESEQ2 PLOTS
dds <- DESeq(dds)
resultsNames(dds)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
## NORMALIZED COUNTS
norm <- counts(dds, normalized=TRUE)
