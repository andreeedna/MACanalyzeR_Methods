library(Boruta)
library(randomForest)
library(dplyr)
DimPlot(mac)
## piccolo cambiamento dovuto alla transizione LAM -> fMAC ## Settembre 2023 ##################
mac$Cells <- factor(mac$cell_type, levels = c("NO-LAM", "LAM"), labels = c("fMAC-", "fMAC+"))
Idents(mac) <- "Cells"
DimPlot(mac)
saveRDS("mac", "../A_DatasetSC_ATHEROSPECTRUM/mac.rds")
saveRDS(mac, "../A_DatasetSC_ATHEROSPECTRUM/mac.rds")
###################################
## SETTING DATA
###################################
mac <- readRDS("../A_DatasetSC_ATHEROSPECTRUM/mac.rds")
library(Seurat)
library(Boruta)
library(randomForest)
library(dplyr)
DimPlot(mac)
mac_expr <- as.data.frame(t(as.data.frame(mac@assays$RNA@data)))
head(colnames(mac_expr))
mac_expr$Sample <- factor(mac$Cells, levels = c("fMAC-", "fMAC+"))
table(mac_expr$Sample)
test_set <- anti_join(mac_expr, training_set)
training_set <- mac_expr %>% slice_sample(prop=0.75, replace = F)
test_set <- anti_join(mac_expr, training_set)
nrow(training_set) + nrow(test_set) == nrow(mac_expr)
table(mac_expr$Sample)
boruta <- readRDS("FeatureSelection_LAM.RDS")
print(boruta)
boruta$finalDecision
att = attStats(boruta)
att = att[which(att$decision=="Confirmed"),]
att = att[order(att$meanImp, decreasing = T),]
att
mac_gene = mac_expr[,c(rownames(att[1:20,]), "Sample")]
mac_gene
mac_gene <- training_set[,c(rownames(att[1:20,]), "Sample")]
#############################
## random forest
#############################
rf <- randomForest(Sample ~. -1,  # response
data=mac_gene, #predictors
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T #retaining the forest in the output object? Y/N
)
rf
summary(rf)
str(rf)
#predicted values of the training set
pred_tra <- rf$predicted
head(pred_tra)
# PREDICT THE TEST SET DATA
pred_test <- predict(rf, newdata=test_set)
head(pred_test)
confmatrix <- table(Actual_value=pred_test, Predicted_Value = test_set$Sample)
confmatrix
library(caret)
confusionMatrix(pred_test,test_set$Sample)
library(ggRandomForests)
gg_dta <- gg_roc(rf, which_outcome = 2)
roc <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
gg_dta<- gg_error(rf)
colnames(gg_dta) <- c("OOB", "fMAC-", "fMAC+", "ntree")
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc / err
ncol(mac_gene)
nrow(mac_gene)
##############################
##  K fold cross validation
##############################
# 5 fold - means that 20% of the data is used for testing (pretty accurate)
repeat_cv <- trainControl(method = "repeatedcv", number = 5, repeats = 10)
r <- train(Sample ~. -1,
data=mac_gene,
method="rf",
trControl=repeat_cv,
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
warnings()
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
ntree=500, #total num of trees in forest
#mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
ntree=500, #total num of trees in forest
mtry= 5,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
ntree=500, #total num of trees in forest
#mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
r
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
#ntree=500, #total num of trees in forest
#mtry= 4,   #mtry
#nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
r
r$call
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
#ntree=500, #total num of trees in forest
mtry= c(3:20),   #mtry
#nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
r$call
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
tuneGrid=tunegrid,
metric="Accuracy"
)
tunegrid <- expand.grid(.mtry = (1:15))
r <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
tuneGrid=tunegrid,
metric="Accuracy"
)
sqrt(20)
integer(sqrt(20))
as.integer(sqrt(20))
tunegrid <- expand.grid(.mtry = as.integer(sqrt(20)))
cv <- train(Sample ~. ,
data=mac_gene,
method="rf",
trControl=repeat_cv,
tuneGrid=tunegrid,
metric="Accuracy"
)
cv$finalModel
cv$finalModel$call
cv$finalModel$confusion
test_set
test_set[, "Sample"]
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(cv, newdata=test_set[,rownames(att[1:20,])])
head(pred_test)
pred_test
confmatrix <- table(Actual_value=pred_test, Predicted_Value = test_set$Sample)
confmatrix
confusionMatrix(pred_test,test_set$Sample)
gg_dta <- gg_roc(rf, which_outcome = 2)
roc <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
gg_dta<- gg_error(rf)
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc / err
roc | err
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc | err
colnames(gg_dta) <- c("OOB", "fMAC-", "fMAC+", "ntree")
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc | err
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(cv, newdata=test_set[,rownames(att[1:20,])], type = "prob")
pred_test
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(cv, newdata=test_set[,rownames(att[1:20,])])
pred_test
confmatrix <- table(Actual_value=pred_test, Predicted_Value = test_set$Sample)
confmatrix
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(cv, newdata=test_set[,rownames(att[1:20,])], , type = "prob")
pred_test
if (pred_test$`fMAC+`>=0.6) pred_test$Sample <- "fMAC+" else pred_test$Sample <- "fMAC-"
if (pred_test$`fMAC+`>=0.6) {pred_test$Sample <- "fMAC+"} else {pred_test$Sample <- "fMAC-"}
pred_test$`fMAC+`>=0.6
if (pred_test$`fMAC+`>=0.6) {
pred_test$Sample <- "fMAC+"
} else {
pred_test$Sample <- "fMAC-"
}
if (pred_test$`fMAC+`>= 0.6) {
pred_test$Sample <- "fMAC+"
} else {
pred_test$Sample <- "fMAC-"
}
if (pred_test$`fMAC+`> 0.6) {
pred_test$Sample <- "fMAC+"
} else {
pred_test$Sample <- "fMAC-"
}
pred_test$`fMAC+`
pred_test$Sample <- "fMAC-"
pred_test
pred_test[which(pred_test$`fMAC+`>0.6), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
gg_dta <- gg_roc(rf, which_outcome = 2)
roc <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
gg_dta<- gg_error(rf)
colnames(gg_dta) <- c("OOB", "fMAC-", "fMAC+", "ntree")
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc | err
pred_test[which(pred_test$`fMAC+`>0.75), "Sample"] <- "fMAC+"
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(cv, newdata=test_set[,rownames(att[1:20,])], , type = "prob")
pred_test$Sample <- "fMAC-"
pred_test[which(pred_test$`fMAC+`>0.75), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
confusionMatrix(pred_test,test_set$Sample)
library(ggRandomForests)
confusionMatrix(pred_test$Sample,test_set$Sample)
pred_test$Sample
test_set$Sample
confusionMatrix(pred_test$Sample,test_set$Sample)
confusionMatrix(as.factor(pred_test$Sample),test_set$Sample)
pred_test[which(pred_test$`fMAC+`>0.8), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
pred_test[which(pred_test$`fMAC+`>0.70), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
pred_test[which(pred_test$`fMAC+`>0.75), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
roc <- plot(gg_dta)
plot(gg_dta)
plot(gg_dta)
gg_dta <- gg_roc(cv, which_outcome = 2)
confusionMatrix(as.factor(pred_test$Sample),test_set$Sample)
#############################
## random forest
#############################
rf <- randomForest(Sample~. -1,  # response
data=mac_gene, #predictors
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T #retaining the forest in the output object? Y/N
)
rf
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(rf, newdata=test_set[,rownames(att[1:20,])], , type = "prob")
pred_test$Sample <- "fMAC-"
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- predict(rf, newdata=test_set[,rownames(att[1:20,])], , type = "prob")
pred_test
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- as.data.frame(predict(rf, newdata=test_set[,rownames(att[1:20,])], , type = "prob"))
pred_test$Sample <- "fMAC-"
pred_test[which(pred_test$`fMAC+`>0.75), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
pred_test[which(pred_test$`fMAC+`>0.5), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
pred_test[which(pred_test$`fMAC+`>0.6), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
gg_dta <- gg_roc(rf, which_outcome = 2)
roc <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
gg_dta<- gg_error(rf)
colnames(gg_dta) <- c("OOB", "fMAC-", "fMAC+", "ntree")
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc | err
gg_dta<- gg_error(rf)
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc | err
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- as.data.frame(predict(rf, newdata=test_set[,rownames(att[1:20,])], , type = "prob"))
pred_test$Sample <- "fMAC-"
pred_test[which(pred_test$`fMAC+`>0.75), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- as.data.frame(predict(rf, newdata=test_set[,rownames(att[1:20,])], , type = "prob"))
pred_test$Sample <- "fMAC-"
pred_test[which(pred_test$`fMAC+`>0.8), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=pred_test$Sample, Predicted_Value = test_set$Sample)
confmatrix
confmatrix <- table(Actual_value=test_set$Sample, Predicted_Value = pred_test$Sample)
confmatrix
#################
##  validation
#################
# PREDICT THE TEST SET DATA
pred_test <- as.data.frame(predict(rf, newdata=test_set[,rownames(att[1:20,])], , type = "prob"))
pred_test$Sample <- "fMAC-"
pred_test[which(pred_test$`fMAC+`>0.75), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=test_set$Sample, Predicted_Value = pred_test$Sample)
confmatrix
pred_test[which(pred_test$`fMAC+`>0.5), "Sample"] <- "fMAC+"
confmatrix <- table(Actual_value=test_set$Sample, Predicted_Value = pred_test$Sample)
confmatrix
confusionMatrix(as.factor(pred_test$Sample),test_set$Sample)
gg_dta <- gg_roc(rf, which_outcome = 2)
roc <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
gg_dta<- gg_error(rf)
colnames(gg_dta) <- c("OOB", "fMAC-", "fMAC+", "ntree")
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc | err
confusionMatrix(as.factor(pred_test$Sample),test_set$Sample)
setwd("~/GitHub/MACanalyzeR_MaterialsMethods/FoamSpotteR/A_DatasetSC_ATHEROSPECTRUM//")
totale <- readRDS("totale_annotato.rds")
DimPlot(totale)
DimPlot(totale, pt.size = 2)
totale <- athero
athero <- athero
athero <- totale
rm(totale)
DimPlot(athero)
DimPlot(athero, cols = RColorBrewer::brewer.pal("Set1", n=9))
DimPlot(split.by = "orig.ident")
DimPlot(athero, split.by = "orig.ident")
DimPlot(athero, split.by = "orig.ident", cols = RColorBrewer::brewer.pal("Set1", n=9))
DimPlot(athero, split.by = "Sample", cols = RColorBrewer::brewer.pal("Set1", n=9))
mac <- readRDS("mac.rds")
DimPlot(mac)
RColorBrewer::brewer.pal("Set1", n=2)
RColorBrewer::display.brewer.all()
RColorBrewer::brewer.pal("Set1", n=5)
foam_color <- c("fMAC+"="#FF7F00", "fMAC-"="#377EB8")
DimPlot(mac)
DimPlot(mac, cols = foam_color)
DimPlot(mac, cols = foam_color, pt.size = 2)
DimPlot(mac, cols = foam_color, pt.size = 1.5)
DimPlot(mac, split.by = "orig.ident",cols = foam_color, pt.size = 1.5)
mac$orig.ident <- factor(mac$orig.ident, levels = c('HEALTY', 'HFD-11W', 'HFD-20W', 'LDLR', 'FOAM'), labels = rep(c("GSE97310", "GSE116240"), times=c(2,3)))
DimPlot(mac, split.by = "orig.ident",cols = foam_color, pt.size = 1.5)
unique(mac$Sample)
mac$orig.ident <- factor(mac$Sample, levels = c('HEALTY', 'HFD 11W', 'HFD 20W', 'LDLR', 'FOAM'), labels = rep(c("GSE97310", "GSE116240"), times=c(2,3)))
DimPlot(mac, split.by = "orig.ident",cols = foam_color, pt.size = 1.5)
mac$orig.ident <- factor(mac$Sample, levels = c('LDLR', 'FOAM', 'HEALTY', 'HFD 11W', 'HFD 20W'), labels = rep(c("GSE116240", "GSE97310"), times=c(2,3)))
DimPlot(mac, split.by = "orig.ident")
DimPlot(mac, split.by = "orig.ident", cols = foam_color, pt.size = 1.5)
table(mac$orig.ident)
table(athero$orig.ident)
table(athero$orig.ident, athero$Cells)
DimPlot(mac, split.by = "Sample", cols = foam_color, pt.size = 1.5)
mac$Sample <-factor(mac$Sample)
mac$Sample <-factor(mac$Sample, levels = c('HEALTY', 'HFD 11W', 'HFD 20W', 'LDLR', 'FOAM'), labels = c('HEALTY', 'HFD-11W', 'HFD-20W', 'LDLR', 'FOAM'))
DimPlot(mac, split.by = "Sample")
DimPlot(mac, split.by = "Sample", cols = foam_color, pt.size = 1.5)
