library(ggplot)
library(ggplot2)
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value")
return(p)
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
return(p)
}
create_barplot_with_error(f, "Var1", "value")
View(f)
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error(f, "Var1", "value", fill="blue")
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = data[,group_col], y = data[,value_col])) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value", col="blue")
f <- data.frame("value"= rnorm(n = 50, mean = 10),
"Var1" = rep(c("a","b"), times=50))
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
library(MACanalyzeR)
library(clusterProfiler)
library(org.Mm.eg.db)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
prot <- openxlsx::read.xlsx("Scaricati/proteomics_results_Lettieri_3.xlsx")
View(prot)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
up <- prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
View(k@result)
up <- prot[which(prot[,40]=="+" & prot[,39]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
quattro_up
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
tre_up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
quattro_up
tre_up
tre_up <- prot[which(prot[,45]=="+" & prot[,44]>0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
source("~/.active-rstudio-document", echo=TRUE)
athero$Sample <- factor(athero$Sample, levels = c('HEALTY', 'HFD-11W', 'HFD-20W', 'FOAM', 'LDLR'))
DimPlot(athero, split.by = "Sample")
DimPlot(athero)
##  macrophages
FeaturePlot(athero, c("Mrc1", "Adgre1", "Cd163"))
FeaturePlot(athero, c("Ly6c2", "Ccr2", "Cx3cr1"))
##  macrophages
FeaturePlot(athero, c("Mrc1", "Adgre1", "Cd163"), order = T)
##  macrophages
FeaturePlot(athero, c("Mrc1", "Adgre1", "Cd163", "Lyve1"), order = T)
FeaturePlot(athero, c("Ly6c2", "Ccr2", "Cx3cr1"), order = T)
##  dendridic
FeaturePlot(athero, c("Ccr9", "Siglech", "Ifi205", "Naaa", "Napsa", "Cd209a"))
##  dendridic
FeaturePlot(athero, c("Ccr9", "Siglech", "Ifi205", "Naaa", "Napsa", "Cd209a"), order = T)
athero <- FindClusters(athero, resolution = 0.4)
DimPlot(athero)
athero <- FindClusters(athero, resolution = 0.2)
DimPlot(athero)
DimPlot(athero, label = T)
##  macrophages
FeaturePlot(athero, c("Mrc1", "Adgre1", "Cd163", "Lyve1"), order = T)
athero$Sample <- factor(athero$Sample, levels = c('HEALTY', 'HFD-11W', 'HFD-20W', 'LDLR', 'FOAM'))
DimPlot(athero, split.by = "Sample")
FeaturePlot(athero)
FeaturePlot(athero, "Trem2")
FeaturePlot(athero, c("Trem2", "Spp1"))
FeaturePlot(athero, c("Trem2", "Spp1"), order = T)
##  macrophages
FeaturePlot(athero, c("Mrc1", "Adgre1", "Cd163", "Lyve1"), order = T)
##  monocytes
FeaturePlot(athero, c("Ly6c2", "Ccr2", "Cx3cr1"), order = T)
##  dendridic
FeaturePlot(athero, c("Ccr9", "Siglech", "Ifi205", "Naaa", "Napsa", "Cd209a"), order = T)
##  B cell
FeaturePlot(athero, c("Ms4a1", "Cd79a"))
##  B cell
FeaturePlot(athero, c("Ms4a1", "Cd79a"), order = T)
##  T cell
FeaturePlot(athero, c("Trbc1", "Nkg7"), order = T)
##  Neutrophil
FeaturePlot(athero, c("S100a8", "S100a9"), order = T)
##  Endo
FeaturePlot(athero, c("Pecam1", "Car4"), order = T)
##  Endo
FeaturePlot(athero, c("Dcn", "Col1a1"), order = T)
x <- FindMarkers(athero, ident.1 = 10)
View(x)
x <- FindMarkers(athero, ident.1 = 10, min.pct=0.25)
##  Endo
FeaturePlot(athero, c("Tbcr1"), order = T)
##  Endo
FeaturePlot(athero, c("Tcrb1"), order = T)
##  Endo
FeaturePlot(athero, c("Trbc1"), order = T)
##  Endo
FeaturePlot(athero, c("Trbc"), order = T)
x <- FindMarkers(athero, ident.1 = 7, min.pct=0.25)
##  Endo
FeaturePlot(athero, c("Acta2"), order = T)
x <- FindMarkers(athero, ident.1 = 12, min.pct=0.25)
x <- FindMarkers(athero, ident.1 = 7, min.pct=0.25)
##  Endo
FeaturePlot(athero, c("Cd163l1"), order = T)
##  Endo
FeaturePlot(athero, c("Icos"), order = T)
##  Endo
FeaturePlot(athero, c("Cav1", "Kdr"), order = T)
x <- FindMarkers(athero, ident.1 = 7, min.pct=0.25)
##  T cell
FeaturePlot(athero, c("Cd4", "Cd8", "Nkg7"), order = T)
##  T cell
FeaturePlot(athero, c("Cd4", "Cd8a", "Nkg7"), order = T)
new.id <- c("Macrophages", "Macrophages", "Macrophages", "NK Cells", "Macrophages", "cDC2", "Fibro",
"T Cells", "B Cells", "cDC1", "T Cells", "Neutrophils", "Endo")
athero$Cells <- factor(athero$seurat_clusters, levels = 0:12, labels = new.id)
Idents(athero) <- "Cells"
DimPlot(athero)
saveRDS(athero, "totale_annotato.rds")
rm(HEALTY, HFD_11W, HFD_20W, FOAM, LDLR)
rm(x)
rm(new.id)
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
DimPlot(mac)
mac <- NormalizeData(mac)
mac <- FindVariableFeatures(mac,selection.method = "vst", nfeatures = 2000)
mac <- ScaleData(mac, features = VariableFeatures(mac))
mac <- RunPCA(mac, features = VariableFeatures(mac), verbose=F)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.cca",
verbose = T)
mac <- SplitObject(mac, split.by = "orig.ident")
mac <- NormalizeData(mac)
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- SplitObject(mac, split.by = "orig.ident")
mac <- NormalizeData(mac)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.cca",
verbose = T)
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- NormalizeData(mac)
mac <- FindVariableFeatures(mac,selection.method = "vst", nfeatures = 2000)
mac <- FindVariableFeatures(mac,selection.method = "vst", nfeatures = 2000)
mac <- ScaleData(mac, features = VariableFeatures(mac))
mac <- RunPCA(mac, features = VariableFeatures(mac), verbose=F)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.cca",
verbose = T)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
mac <- SplitObject(mac, split.by = "orig.ident")
mac
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- NormalizeData(mac)
mac <- FindVariableFeatures(mac,selection.method = "vst", nfeatures = 2000)
mac <- ScaleData(mac, features = VariableFeatures(mac))
mac <- RunPCA(mac, features = VariableFeatures(mac), verbose=F)
ElbowPlot(mac, reduction = "pca", 50)
mac <- FindNeighbors(mac, reduction = "integrated.cca", dims = 1:20)
mac <- FindClusters(mac, resolution = 0.2)
mac <- RunUMAP(mac, reduction = "integrated.cca", dims = 1:20)
mac <- JoinLayers(mac)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
DimPlot(mac)
DimPlot(mac, split.by = "Sample")
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- NormalizeData(mac)
mac <- FindVariableFeatures(mac,selection.method = "vst", nfeatures = 2000)
mac <- ScaleData(mac, features = VariableFeatures(mac))
n <- readRDS("macrofagi_annotato.RDS")
DimPlot(n)
DimPlot(n, split.by = "Sample")
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac
mac <- NormalizeData(mac)
mac <- FindVariableFeatures(mac,selection.method = "vst", nfeatures = 2000)
mac <- ScaleData(mac, features = VariableFeatures(mac))
VariableFeatures(mac)
mac <- ScaleData(mac, features = VariableFeatures(mac))
mac <- RunPCA(mac, features = VariableFeatures(mac), verbose=F)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
Assays(mac) <- "RNA"
Assays(mac)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
UseMethod(generic = "Assays", object = mac)
Assays(mac)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = F)
mac <- ScaleData(mac)
mac <- RunPCA(mac, features = VariableFeatures(mac), verbose=F)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
mac <- SplitObject(athero,split.by = "Sample")
Assays(mac)
Assays(mac)
mac <- JoinLayers(mac)
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- SplitObject(athero)
mac
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
table(athero$Sample)
table(n$Sample)
DimPlot(n, split.by = "Sample")
n$Sample <- factor(n$Sample, levels = c('HEALTY', 'HFD-11W', 'HFD-20W', 'LDLR', 'FOAM'))
DimPlot(n, split.by = "Sample")
n <- readRDS("macrofagi_annotato.RDS")
DimPlot(n, split.by = "Sample")
n$Sample <- factor(n$Sample, levels = c('HEALTY', 'HFD 11W', 'HFD 20W', 'LDLR', 'FOAM'))
DimPlot(n, split.by = "Sample")
DimPlot(n, split.by = "Sample") | DimPlot(mac, split.by = "Sample")
DimPlot(n, split.by = "Sample") / DimPlot(mac, split.by = "Sample")
DimPlot(mac, split.by = "Sample")
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- SplitObject(athero)
mac <- NormalizeData(mac)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
ElbowPlot(mac, reduction = "pca", 50)
mac <- FindNeighbors(mac, reduction = "integrated.cca", dims = 1:20)
################################
##  macrophages
################################
mac <- subset(athero, idents = "Macrophages")
mac <- NormalizeData(mac)
mac <- FindVariableFeatures(mac, selection.method = "vst", nfeatures = 2000)
mac <- ScaleData(mac)
mac <- RunPCA(mac, features = VariableFeatures(mac), verbose=F)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
ElbowPlot(mac, reduction = "pca", 50)
mac <- FindNeighbors(mac, reduction = "integrated.cca", dims = 1:20)
mac <- FindClusters(mac, resolution = 0.2)
mac <- RunUMAP(mac, reduction = "integrated.cca", dims = 1:20)
mac <- JoinLayers(mac)
DimPlot(mac, split.by = "Sample")
DimPlot(n, split.by = "Sample") / DimPlot(mac, split.by = "Sample")
table(n$Sample, mac$Sample)
table(n$Sample)
table(mac$Sample)
mac <- IntegrateLayers(
object = mac, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = "integrated.rpca",
verbose = T)
n$Cells <- factor(n$cell_type, )
n$Cells
n$cell_type
n$Cells <- factor(n$cell_type, levels = c("LAM", "NO-LAM"), labels = c("fMAC+", "fMAC-"))
saveRDS(mac, "mac.rds")
rm(list = ls())
gc()
setwd("~/GitHub/MACanalyzeR_MaterialsMethods/FoamSpotteR/Z_RandomForest/")
###################################
## SETTING DATA
###################################
mac <- readRDS("../A_DatasetSC_ATHEROSPECTRUM/mac.rds")
DimPlot(mac)
###################################
## SETTING DATA
###################################
mac <- readRDS("../A_DatasetSC_ATHEROSPECTRUM/macrofagi_annotato.RDS")
DimPlot(mac)
## piccolo cambiamento dovuto alla transizione LAM -> fMAC ## Settembre 2023 ##################
mac$Cells <- factor(mac$cell_type, levels = c("NO-LAM", "LAM"), labels = c("fMAC-", "fMAC+"))
Idents(mac) <- "Cells"
DimPlot(mac)
mac_expr = as.data.frame(t(as.data.frame(mac@assays$RNA@data)))
head(colnames(mac_expr))
table(mac_expr$Sample)
mac_expr$Sample <- factor(mac$Cells, levels = c("fMAC-", "fMAC+"))
table(mac_expr$Sample)
training_set <- mac_expr %>% slice_sample(prop=0.75, replace = F)
library(Seurat)
library(Boruta)
library(randomForest)
library(dplyr)
library(ggplot2)
library(patchwork)
library(reshape2)
training_set <- mac_expr %>% slice_sample(prop=0.75, replace = F)
test_set <- anti_join(mac_expr, training_set)
training_set
rownames(training_set)
rownames(test_set)
nrow(training_set) + nrow(test_set) == nrow(mac_expr)
mac_expr$Sample <- factor(mac$Cells, levels = c("fMAC-", "fMAC+"))
table(mac_expr$Sample)
training_set <- mac_expr %>% slice_sample(prop=0.75, replace = F)
test_set <- anti_join(mac_expr, training_set)
nrow(training_set) + nrow(test_set) == nrow(mac_expr)
#############################
## boruta
#############################
set.seed(20)
boruta <- readRDS("FeatureSelection_LAM.RDS")
boruta$finalDecision
att = attStats(boruta)
att = att[which(att$decision=="Confirmed"),]
att = att[order(att$meanImp, decreasing = T),]
mac_gene = mac_expr[,c(rownames(att[1:20,]), "Sample")]
mac_gene
rf <- randomForest(Sample ~. -1,  # response
data=mac_gene, #predictors
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T #retaining the forest in the output object? Y/N
)
rf
summary(rf)
str(rf)
#predicted values of the training set
pred_tra <- rf$predicted
head(pred_tra)
# PREDICT THE TEST SET DATA
pred_test <- predict(rf, newdata=test_set)
head(pred_test)
confmatrix <- table(Actual_value=pred_test, Predicted_Value = test_set$Sample)
confmatrix
library(caret)
confusionMatrix(pred_test,test_set$Sample)
library(ggRandomForests)
gg_dta <- gg_roc(rf, which_outcome = 2)
roc <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
gg_dta<- gg_error(rf)
colnames(gg_dta) <- c("OOB", "fMAC-", "fMAC+", "ntree")
err <- plot(gg_dta) +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black"))
roc / err
r <- train(Sample ~. -1,
data=mac_gene,
method="rf",
trControl="repeat_cv",
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
##############################
##  K fold cross validation
##############################
repeat_cv <- trainControl(method = "repeatedcv", number = 100, repeats = 100)
r <- train(Sample ~. -1,
data=mac_gene,
method="rf",
trControl=repeat_cv,
ntree=500, #total num of trees in forest
mtry= 4,   #mtry
nodesize= 5, #nodesize
importance=T, #computing the importance of predictive variables? Y/N
keep.forest=T, #retaining the forest in the output object? Y/N
metric="Accuracy"
)
warnings()
