#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
library(ggplot2)
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
mac_color <- c("Monocytes"="#3468C0",
"PVM"="#86A7FC",
"LAM"="#FF9843",
"P_LAM"="#FFDD95")
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
#ggplot(dat, aes(x=(dat[,1]/dat[,2]), y=LAM)) +
ggplot(dat, aes(x=(dat[,1]/dat[,2]), y=LAM)) +
labs(x="Inflammation", y="Foaming") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 0.5, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = Cells, fill = Cells), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = Cluster), size=2) +
scale_x_continuous(limits = c(0.01, 1.8)) +
#scale_color_manual(values = mac_color) +
facet_grid(rows = vars(Sample), cols = vars(Cluster))
dat
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color=plot.by, fill=plot.by) +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
###################################################################################################################
# GRAFICI MACANALYZER AGGIUNTIVI
bey <- readRDS("~/Documenti/MACanalyzeR/B_MacPolarizeR/A_DatasetSC_MACSPECTRUM/mac012_adj.RDS")
mac_bey <- CreateMacObj(bey, "Sample", "Sample", "tsne")
mac_bey <- x(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
mac_bey <- x(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
PathHeat
MacPlot
MacBarplot
MacBarplot()
MacBarplot
install.packages("Documenti/MACanalyzeR/MACanalyzer.tar.gz")
library(MACanalyzeR)
mac <- CreateMacObj(readRDS("Documenti/EFSD_pt2/Macrophages.rds"))
mac <- CreateMacObj(readRDS("Documenti/EFSD_pt2/Macrophages.rds"), "Sample", "Cells")
MacPlot(mac)
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
mac <- MacPolarizeR2(mac)
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
t <- readRDS("Documenti/EFSD_pt2/annotato.rds")
library(Seurat)
FeaturePlot(t, c("Rora", "Rorb"))
FeaturePlot(t, c("Rora", "Rorb"), split.by = "Sample")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
create_barplot_with_error(f, "Var1", "value", col=c("blue"))
# Crea il barplot con le barre di errore
p <- ggplot(data, aes_string(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes_string(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
library(ggplot)
library(ggplot2)
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value")
return(p)
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
return(p)
}
create_barplot_with_error(f, "Var1", "value")
View(f)
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error(f, "Var1", "value", fill="blue")
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = data[,group_col], y = data[,value_col])) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value", col="blue")
f <- data.frame("value"= rnorm(n = 50, mean = 10),
"Var1" = rep(c("a","b"), times=50))
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
library(MACanalyzeR)
library(clusterProfiler)
library(org.Mm.eg.db)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
prot <- openxlsx::read.xlsx("Scaricati/proteomics_results_Lettieri_3.xlsx")
View(prot)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
up <- prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
View(k@result)
up <- prot[which(prot[,40]=="+" & prot[,39]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
quattro_up
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
tre_up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
quattro_up
tre_up
tre_up <- prot[which(prot[,45]=="+" & prot[,44]>0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
setwd("GitHub/MACanalyzeR_MacPolarizeR/scRNAseq_sepsi_PRJNA626597/")
setwd("GitHub/MACanalyzeR_MaterialsMethods/MACanalyzeR_MacPolarizeR/scRNAseq_sepsi_PRJNA626597/")
mac <- readRDS("sepsi_macrophages.RDS")
## scRNAseq analysis of SVF etracted from SEPTIC adipose tissue after one day and one month
library(Seurat)
library(ggplot2)
library(tidyverse)
library(gridExtra)
DefaultAssay(mac) <- "RNA"
mac$integrated_snn_res.0.1 <- NULL
mac$integrated_snn_res.0.4 <- NULL
mac$integrated_snn_res.0.3 <- NULL
head(mac@meta.data)
saveRDS(mac, "sepsi_macrophages.RDS")
tot <- readRDS("sepsi_totale.RDS")
tot@meta.data
tot@meta.data$integrated_snn_res.0.4 <- NULL
head(tot@meta.data)
DimPlot(sep)
DimPlot(tot)
FeaturePlot(tot, c("Ptprc", "Pecam1", "Pdgfra"))
FeaturePlot(tot, c("Ptprc", "Pecam1", "Pdgfra"),
order = T, min.cutoff = "q5", max.cutoff = "q90")
DimPlot(tot, label = T)
FeaturePlot(tot, c("Adgre1", "Mrc1", "Cd163"))
FeaturePlot(tot, c("Adgre1", "Mrc1", "Cd163"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Ly6c2", "Ccr2"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Ms4a1", "Cd79a"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Trbc1", "Cd3d"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Trbc1", "Cd3d", "Nkg7"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Ifi205", "Naaa"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Napsa", "Cd209a"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Ifi205", "Naaa"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Siglech", "Ccr9"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("S100a8", "S100a9"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Pecam1", "Car4"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Alas2", "Ccr2"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
FeaturePlot(tot, c("Alas2", "Acta2"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
x <- FindMarkers(tot, ident.1 = 14)
x <- FindMarkers(tot, ident.1 = 14, min.pct=0.25)
View(x)
FeaturePlot(tot, c("Birc5", "Top2a"), order = T,
min.cutoff = "q5", max.cutoff = "q90")
new.id <- c("MonoMacs", "Neutrophils", "Fibroblasts", "MonoMacs", "T Cells", "NK", "Neutrophils", "cDC", "T Cells", "cDC",
"Neutrophils", "B Cells", "Endothelial Cells", "pDC", "Neurons", "Proliferating")
tot$Cells <- factor(tot$seurat_clusters, levels = 0:15, labels = new.id)
Idents(tot) <- "Cells"
DimPlot(tot)
saveRDS(tot, "sepsi_totale.RDS")
DimPlot(tot, split.by = "Sample")
tot <- readRDS("sepsi_totale.RDS")
mac <- readRDS("sepsi_macrophages.RDS")
tot
mac
DimPlot(tot)
tot$Sample <- factor(tot$Sample, levels = C("CTRL", "SEPDAY", "SEPMONTH"), labels = c("CTRL", "Sepsis 1day", "Sepsis 1Month"))
DimPlot(tot, split.by = "Sample")
tot$Sample <- factor(tot$Sample, levels = c("CTRL", "SEPDAY", "SEPMONTH"), labels = c("CTRL", "Sepsis 1day", "Sepsis 1Month"))
DimPlot(tot, split.by = Sample)
DimPlot(tot, split.by = "Sample")
tot <- readRDS("sepsi_totale.RDS")
tot$Sample <- factor(tot$Sample, levels = c("CTRL", "SEPDAY", "SEPMONTH"), labels = c("CTRL", "Sepsis 1day", "Sepsis 1month"))
DimPlot(tot, split.by = "Sample")
saveRDS(tot, "sepsi_totale.RDS")
mac$Sample <- factor(mac$Sample, levels = c("CTRL", "SEPDAY", "SEPMONTH"), labels = c("CTRL", "Sepsis 1day", "Sepsis 1month"))
DimPlot(mac, split.by = "Sample")
saveRDS(mac, "sepsi_macrophages.RDS")
table(mac$Sample)
setwd("~/GitHub/MACanalyzeR_MaterialsMethods/MACanalyzeR_MacPolarizeR/scRNAseq_polarized_macrophages_GSE117177/")
######################
# LOAD DATA
######################
for(x in list.dirs(path='.', recursive = F, full.names = F)){
name <- gsub('','',x)
cts <- ReadMtx(mtx = paste0(x, '/matrix.mtx.gz'),
features = paste0(x, '/genes_adj.tsv.gz'),
cells = paste0(x, '/barcodes.tsv.gz'))
assign(x, CreateSeuratObject(counts = cts, project = x))
rm(cts, name, x)
}
###############################
# QC and FILTERING
###############################
#calculate % MT genes
M0[['percent.mt']] <- PercentageFeatureSet(M0, pattern = '^[Mm][Tt]-')
M1[['percent.mt']] <- PercentageFeatureSet(M1, pattern = '^[Mm][Tt]-')
M2[['percent.mt']] <- PercentageFeatureSet(M2, pattern = '^[Mm][Tt]-')
# M0
M0_filt <- subset(M0, subset= percent.mt < 5)
VlnPlot(M0_filt, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
M0_filt
# M1
M1_filt <- subset(M1, subset= percent.mt < 5)
VlnPlot(M1_filt, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
M1_filt
# M2
M2_filt <- subset(M2, subset= percent.mt < 5)
VlnPlot(M2_filt, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
M2_filt
#sample the same number of cells - campione minore WT16w
set.seed(25)
n.cell.sample <- 4000
m0.sampled.cells <- sample(rownames(M0_filt@meta.data), size = n.cell.sample, replace = F)
M0_filt <- subset(M0_filt, cells = m0.sampled.cells)
M0_filt
rm(m0.sampled.cells)
m1.sampled.cells <- sample(rownames(M1_filt@meta.data), size = n.cell.sample, replace = F)
M1_filt <- subset(M1_filt, cells = m1.sampled.cells)
M1_filt
rm(m1.sampled.cells)
m2.sampled.cells <- sample(rownames(M2_filt@meta.data), size = n.cell.sample, replace = F)
M2_filt <- subset(M2_filt, cells = m2.sampled.cells)
M2_filt
rm(m2.sampled.cells)
rm(n.cell.sample)
rm(M0, M1, M2)
rm(mac,tot)
gc()
#############################
# MERGE SEURAT OBJECTS
#############################
bey <- merge(x= M0_filt , y=c(M1_filt, M2_filt),
add.cell.id = c('M0', 'M1', 'M2'))
bey$sample <- rownames(bey@meta.data)
bey@meta.data <- separate(bey@meta.data, col='sample',
into=c('Sample','Barcode'),
sep='_')
rm(M0_filt, M1_filt, M2_filt)
############################
# NON INTEGRATION STEP
############################
bey <- NormalizeData(bey)
bey <- FindVariableFeatures(bey, selection.method = "vst", nfeatures = 2000)
bey <- ScaleData(bey, features = rownames(bey))
bey <- RunPCA(bey, features = VariableFeatures(object = bey))
ElbowPlot(bey, 50)
bey <- RunTSNE(object = bey, reduction = 'pca', dims= 1:10)
bey <- FindNeighbors(bey, dims = 1:10)
bey <- FindClusters(bey, resolution = 0.2)
#visualize
DimPlot(bey, reduction = 'tsne', group.by = 'Sample')
DimPlot(bey, reduction = 'tsne', label = TRUE)
#############################
##  MACanalyzeR
#############################
mac_bey <- CreateMacObj(bey, "Sample", "Sample", "tsne")
#############################
##  MACanalyzeR
#############################
library(MACanalyzeR)
mac_bey <- CreateMacObj(bey, "Sample", "Sample", "tsne")
mac_bey <- MacPolarizeR(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
dat <- as.data.frame(mac_bey@MacPolarizeR$SingleCell)
dat[,"Sample"] <- mac_bey@MetaData[["Sample"]]
bey <- readRDS("macrophages.rds")
mac_bey <- CreateMacObj(bey, "Sample", "Sample", "tsne")
mac_bey <- MacPolarizeR(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
mac_bey <- MacPolarizeR(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
dat <- as.data.frame(mac_bey@MacPolarizeR$SingleCell)
dat[,"Sample"] <- mac_bey@MetaData[["Sample"]]
dat[,"Cluster"] <- mac_bey@MetaData[["Cluster"]]
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
facet_grid(rows = vars(Sample), cols = vars(Cluster))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
#geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
#geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5))
