strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = dat[,3], fill = dat[,3]), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
scale_color_manual(values = mac_color) +
#facet_wrap(~Sample+Cluster)
facet_grid(rows = vars(Sample), cols = vars(Cluster))
###################################################################################################################
# GRAFICI MACANALYZER AGGIUNTIVI
bey <- readRDS("~/Documenti/MACanalyzeR/B_MacPolarizeR/A_DatasetSC_MACSPECTRUM/mac012_adj.RDS")
mac_bey <- CreateMacObj(bey, "Sample", "Sample", "tsne")
mac_bey <- x(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
mac_bey <- x(mac_bey)
MacPlot(mac_bey, plot.by = "Mac") + MacPlot(mac_bey)
PathHeat
MacPlot
MacBarplot
MacBarplot()
MacBarplot
install.packages("Documenti/MACanalyzeR/MACanalyzer.tar.gz")
library(MACanalyzeR)
mac <- CreateMacObj(readRDS("Documenti/EFSD_pt2/Macrophages.rds"))
mac <- CreateMacObj(readRDS("Documenti/EFSD_pt2/Macrophages.rds"), "Sample", "Cells")
MacPlot(mac)
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
mac <- MacPolarizeR(mac)
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
MacPlot(mac, plot.by = "Mac")
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
mac <- MacPolarizeR2(mac)
MacPlot(mac, plot.by = "Mac", split.by = "Sample")
t <- readRDS("Documenti/EFSD_pt2/annotato.rds")
library(Seurat)
FeaturePlot(t, c("Rora", "Rorb"))
FeaturePlot(t, c("Rora", "Rorb"), split.by = "Sample")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
create_barplot_with_error(f, "Var1", "value", col=c("blue"))
# Crea il barplot con le barre di errore
p <- ggplot(data, aes_string(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes_string(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
library(ggplot)
library(ggplot2)
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value")
return(p)
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
p <- ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
return(p)
}
create_barplot_with_error(f, "Var1", "value")
View(f)
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = group_col, y = value_col)) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
f <- data.frame("value"= rnorm(n = 50),
"Var1" = rep(c("a","b"), times=50))
f
create_barplot_with_error(f, "Var1", "value")
create_barplot_with_error(f, "Var1", "value", fill="blue")
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error <- function(data, group_col, value_col, col=c("N"="#386641", "T"="#6A994E", "S"="#A7C957")) {
# Controlla che le colonne esistano nel data frame
if (!all(c(group_col, value_col) %in% colnames(data))) {
stop("Le colonne specificate non esistono nel data frame.")
}
# Crea il barplot con le barre di errore
ggplot(data, aes(x = data[,group_col], y = data[,value_col])) +
stat_summary(fun = mean, geom = "bar", fill = col, color = "black") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.7) +
labs(x = group_col, y = value_col) +
theme_minimal()
}
create_barplot_with_error(f, "Var1", "value", col="blue")
f <- data.frame("value"= rnorm(n = 50, mean = 10),
"Var1" = rep(c("a","b"), times=50))
create_barplot_with_error(f, "Var1", "value", col="blue")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
create_barplot_with_error(f, "Var1", "value", col="blue") +
labs(x="culo", y="culone")
library(MACanalyzeR)
library(clusterProfiler)
library(org.Mm.eg.db)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
prot <- openxlsx::read.xlsx("Scaricati/proteomics_results_Lettieri_3.xlsx")
View(prot)
prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
up <- prot[which(prot[,40]=="+" & prot[,39]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
View(k@result)
up <- prot[which(prot[,40]=="+" & prot[,39]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
barplot(simplify(k), showCategory=10)
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k <- enrichGO(gene = up, OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k, showCategory=10)
quattro_up
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
tre_up <- prot[which(prot[,45]=="+" & prot[,44]<0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]<0),ncol(prot)]
quattro_up
tre_up
tre_up <- prot[which(prot[,45]=="+" & prot[,44]>0),ncol(prot)]
quattro_up <- prot[which(prot[,50]=="+" & prot[,49]>0),ncol(prot)]
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "ALL")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "CC")
barplot(k_diff, showCategory=10)
k_int <- enrichGO(gene = intersect(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_int, showCategory=10)
k_diff <- enrichGO(gene = setdiff(quattro_up, tre_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
k_diff <- enrichGO(gene = setdiff(tre_up, quattro_up), OrgDb = org.Mm.eg.db, keyType = "SYMBOL", ont = "MF")
barplot(k_diff, showCategory=10)
setwd("GitHub/MACanalyzeR_MaterialsMethods/MacPolarizeR/SEPSI_PRJNA626597/")
######################
# LOAD DATA
######################
for(x in list.dirs(path='.', recursive = F, full.names = F)){
name <- gsub('','',x)
cts <- ReadMtx(mtx = paste0('C_DatasetSC_SEPSI/', x, '/matrix.mtx.gz'),
features = paste0('C_DatasetSC_SEPSI/', x, '/features.tsv.gz'),
cells = paste0('C_DatasetSC_SEPSI/', x, '/barcodes.tsv.gz'))
assign(x, CreateSeuratObject(counts = cts, project = x))
rm(cts, name, x)
}
library(Seurat)
library(ggplot2)
library(tidyverse)
library(gridExtra)
######################
# LOAD DATA
######################
for(x in list.dirs(path='.', recursive = F, full.names = F)){
name <- gsub('','',x)
cts <- ReadMtx(mtx = paste0('C_DatasetSC_SEPSI/', x, '/matrix.mtx.gz'),
features = paste0('C_DatasetSC_SEPSI/', x, '/features.tsv.gz'),
cells = paste0('C_DatasetSC_SEPSI/', x, '/barcodes.tsv.gz'))
assign(x, CreateSeuratObject(counts = cts, project = x))
rm(cts, name, x)
}
######################
# LOAD DATA
######################
for(x in list.dirs(path='.', recursive = F, full.names = F)){
name <- gsub('','',x)
cts <- ReadMtx(mtx = paste0(x, '/matrix.mtx.gz'),
features = paste0( x, '/features.tsv.gz'),
cells = paste0(x, '/barcodes.tsv.gz'))
assign(x, CreateSeuratObject(counts = cts, project = x))
rm(cts, name, x)
}
###############################
# QC and FILTERING
###############################
#calculate % MT genes
CTRL[['percent.mt']] <- PercentageFeatureSet(CTRL, pattern = '^[Mm][Tt]-')
SEPSIS_ONE_DAY[['percent.mt']] <- PercentageFeatureSet(SEPSIS_ONE_DAY, pattern = '^[Mm][Tt]-')
SEPSIS_ONE_MONTH[['percent.mt']] <- PercentageFeatureSet(SEPSIS_ONE_MONTH, pattern = '^[Mm][Tt]-')
sep <- readRDS("Documenti/MACanalyzeR/B_MacPolarizeR/C_DatasetSC_SEPSI/sepsiintegrato_trecondizioni.RDS")
gmtPathways <- function(gmt.file) {
pathwayLines <- strsplit(readLines(gmt.file), "\t")
pathways <- lapply(pathwayLines, tail, -2)
names(pathways) <- sapply(pathwayLines, head, 1)
pathways
}
setwd("~/GitHub/MACanalyzeR_MaterialsMethods/MACanalyzeR_PathAnalyzeR/RawGMT_mouse/")
human_metabolic <- gmtPathways("GO.v5.2.symbols_mouse.gmt")
human_metabolic
setwd("~/GitHub/MACanalyzeR_MaterialsMethods/MACanalyzeR_MacPolarizeR/scRNAseq_sepsi_PRJNA626597/")
######################
# LOAD DATA
######################
#load data
for(x in list.dirs(path='.', recursive = F, full.names = F)){
name <- gsub('','',x)
cts <- ReadMtx(mtx = paste0(x, '/matrix.mtx.gz'),
features = paste0(x, '/features.tsv.gz'),
cells = paste0(x, '/barcodes.tsv.gz'))
assign(x, CreateSeuratObject(counts = cts, project = x))
rm(cts, name, x)
}
###############################
# QC and FILTERING
###############################
#calculate % MT genes
CTRL[['percent.mt']] <- PercentageFeatureSet(CTRL, pattern = '^[Mm][Tt]-')
SEPSIS_ONE_DAY[['percent.mt']] <- PercentageFeatureSet(SEPSIS_ONE_DAY, pattern = '^[Mm][Tt]-')
SEPSIS_ONE_MONTH[['percent.mt']] <- PercentageFeatureSet(SEPSIS_ONE_MONTH, pattern = '^[Mm][Tt]-')
# CTRL
VlnPlot(CTRL, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
#filter CTRL
CTRL_filt <- subset(CTRL, subset= nFeature_RNA > 500 & nCount_RNA > 500 & percent.mt < 5)
VlnPlot(CTRL_filt, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
CTRL_filt
# SEPSIS_ONE_DAY
VlnPlot(SEPSIS_ONE_DAY, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
#filter SEPSIS_ONE_MONTH
SEPSIS_ONE_DAY_filt <- subset(SEPSIS_ONE_DAY, subset= nFeature_RNA > 500 & nCount_RNA > 500 & percent.mt < 5)
VlnPlot(SEPSIS_ONE_DAY_filt, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
SEPSIS_ONE_DAY_filt
# SEPSIS_ONE_MONTH
VlnPlot(SEPSIS_ONE_MONTH, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
#filter SEPSIS_ONE_MONTH
SEPSIS_ONE_MONTH_filt <- subset(SEPSIS_ONE_MONTH, subset= nFeature_RNA > 500 & nCount_RNA > 500 & percent.mt < 5)
VlnPlot(SEPSIS_ONE_MONTH_filt, features = c('nFeature_RNA', 'nCount_RNA', 'percent.mt'), ncol = 3)
SEPSIS_ONE_MONTH_filt
#sample the same number of cells - campione minore WT16w
n.cell.sample <- 2300
set.seed(500)
sampled.cells <- sample(rownames(CTRL_filt@meta.data), size = n.cell.sample, replace = F)
sampled.cells <- sample(rownames(CTRL_filt@meta.data), size = n.cell.sample, replace = F)
CTRL_filt <- subset(CTRL_filt, cells = sampled.cells)
CTRL_filt
sampled.cells <- sample(rownames(SEPSIS_ONE_DAY_filt@meta.data), size = n.cell.sample, replace = F)
SEPSIS_ONE_DAY_filt <- subset(SEPSIS_ONE_DAY_filt, cells = sampled.cells)
SEPSIS_ONE_DAY_filt
sampled.cells <- sample(rownames(SEPSIS_ONE_MONTH_filt@meta.data), size = n.cell.sample, replace = F)
SEPSIS_ONE_MONTH_filt <- subset(SEPSIS_ONE_MONTH_filt, cells = sampled.cells)
SEPSIS_ONE_MONTH_filt
rm(n.cell.sample, sampled.cells)
rm(CTRL, SEPSIS_ONE_DAY, SEPSIS_ONE_MONTH)
#############################
# MERGE SEURAT OBJECTS
#############################
sep <- merge(x= CTRL_filt , y=c(SEPSIS_ONE_DAY_filt, SEPSIS_ONE_MONTH_filt),
add.cell.id = c('CTRL', 'SEPDAY', 'SEPMONTH'))
sep$sample <- rownames(sep@meta.data)
sep@meta.data <- separate(sep@meta.data, col='sample',
into=c('Sample','Barcode'),
sep='_')
sep$Sample <- factor(x = sep$Sample, levels = c('CTRL', 'SEPDAY', 'SEPMONTH'))
rm(CTRL_filt, SEPSIS_ONE_DAY_filt, SEPSIS_ONE_MONTH_filt)
############################
# INTEGRATION STEP
############################
list <- SplitObject(sep, split.by = 'Sample')
for(i in 1:length(list)){
list[[i]] <- NormalizeData(object = list[[i]])
list[[i]] <- FindVariableFeatures(object = list[[i]], nfeatures = 2000)
rm(i)
}
features <- SelectIntegrationFeatures(object.list = list, nfeatures = 2000)
anchors <- FindIntegrationAnchors(object.list = list, anchor.features = features)
sepsi <- IntegrateData(anchorset = anchors)
sepsi <- ScaleData(object = sepsi)
rm(list ,anchors, features)
DefaultAssay(sepsi) <- "integrated"
sepsi <- ScaleData(object = sepsi)
sepsi <- RunPCA(object = sepsi, npcs = 30)
sepsi <- RunUMAP(object = sepsi, reduction = 'pca', dims= 1:20)
sepsi <- FindNeighbors(sepsi, reduction ='pca' , dims = 1:20)
sepsi <- FindClusters(sepsi, resolution = 0.4)
DefaultAssay(sepsi) <- "RNA"
#visualize
DimPlot(sepsi, reduction = 'umap', group.by = 'Sample')
DimPlot(sepsi, reduction = 'umap', label = TRUE)
rm(sep)
DimPlot(sepsi)
DimPlot(sepsi, split.by = "Sample")
#visualize
DimPlot(sepsi)
DimPlot(sepsi, split.by = "Sample")
#visualize
DimPlot(sepsi, label = T)
FeaturePlot(sepsi, "Adgre1")
FeaturePlot(sepsi, "Adgre1", order = T, min.cutoff = "q5", max.cutoff = "q95")
###############
## MONOMAC
###############
mac <- subset(sepsi, idents = c(0,2))
list <- SplitObject(mac, split.by = 'Sample')
for(i in 1:length(list)){
list[[i]] <- NormalizeData(object = list[[i]])
list[[i]] <- FindVariableFeatures(object = list[[i]], nfeatures = 2000)
rm(i)
}
features <- SelectIntegrationFeatures(object.list = list, nfeatures = 2000)
anchors <- FindIntegrationAnchors(object.list = list, anchor.features = features)
features <- SelectIntegrationFeatures(object.list = list, nfeatures = 2000)
anchors <- FindIntegrationAnchors(object.list = list, anchor.features = features)
mac_sepsi <- IntegrateData(anchorset = anchors)
mac_sepsi <- ScaleData(object = mac_sepsi)
rm(list ,anchors, features)
DefaultAssay(mac_sepsi) <- "integrated"
mac_sepsi <- ScaleData(object = mac_sepsi)
mac_sepsi <- RunPCA(object = mac_sepsi, npcs = 30)
ElbowPlot(mac_sepsi, reduction = 'pca', 30)
mac_sepsi <- RunUMAP(object = mac_sepsi, reduction = 'pca', dims= 1:10)
mac_sepsi <- FindNeighbors(mac_sepsi, reduction ='pca' , dims = 1:10)
mac_sepsi <- FindClusters(mac_sepsi, resolution = 0.1)
DimPlot(mac_sepsi)
DimPlot(mac_sepsi, split.by = "Sample")
FeaturePlot(mac_sepsi, "Trem2")
FeaturePlot(mac_sepsi, "Trem2", order = T, split.by = "Sample")
FeaturePlot(mac_sepsi, "Trem2", order = T, split.by = "Sample", min.cutoff = "q5")
FeaturePlot(mac_sepsi, "Trem2", order = T, split.by = "Sample", min.cutoff = "q5", max.cutoff = "q90
")
##################
##  MACanalyzeR
##################
mac_sep <- CreateMacObj(mac_sepsi, "Sample", "Sample")
##################
##  MACanalyzeR
##################
library(MACanalyzeR)
mac_sep <- CreateMacObj(mac_sepsi, "Sample", "Sample")
mac_sep$Sample
mac_sepsi$Sample
mac_sep <- CreateMacObj(mac_sepsi, "Sample", "Sample")
mac_sepsi <- JoinLayers(mac_sepsi)
MacPlot(mac_sep)
mac_sep <- MacPolarizeR(mac_sep)
MacPlot(mac_sep, plot.by = "Mac", split.by = "Sample")
MacPlot(mac_sep, split.by = "Sample")
mac_sep <- MacPolarizeR(mac_sep)
MacPlot(mac_sep, plot.by = "Mac", split.by = "Sample")
MacPlot(mac_sep, split.by = "Mac)
MacPlot(mac_sep, split.by = "Mac")
mac_sep <- MacPolarizeR(mac_sep)
MacPolarizeR(mac_sep)
MacPlot(mac_sep, split.by = "Mac")
length(mac_sep@MetaData$Mac)
length(mac_sep@MetaData$Sample)
mac_sep <- CreateMacObj(mac_sepsi, "Sample", "Sample")
mac_sepsi <- JoinLayers(mac_sepsi)
mac_sepsi
mac_sepsi <- readRDS("macsepsi_trecondizioni.RDS")
mac_sep <- CreateMacObj(mac_sepsi, "Sample")
MacPlot(mac_sep, split.by = "Mac")
MacPlot(mac_sep, split.by = "Sample")
mac_sep <- MacPolarizeR(mac_sep)
MacPlot(mac_sep, plot.by = "Mac", split.by = "Sample")
dat <- as.data.frame(mac_sep@MacPolarizeR$SingleCell)
dat[,"Sample"] <- mac_sep@MetaData[["Sample"]]
dat[,"Cluster"] <- mac_sep@MetaData[["Cluster"]]
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
#stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
facet_grid(rows = vars(Sample), cols = vars(Cluster))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
#geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
facet_grid(rows = vars(Sample), cols = vars(Cluster))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
#geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5)) +
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
legend.key=element_rect(fill="white"),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
#geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5))
ggplot(dat, aes(x=dat[,1], y=dat[,2])) +
labs(x="M1", y="M2", color="", fill="") +
geom_vline(xintercept = 1, colour = 'grey30') +
geom_hline(yintercept = 1, colour = 'grey30') +
theme(text = element_text(size = 17),
panel.background = element_blank(),
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(),
strip.background = element_rect(color = "black")) +
stat_density_2d(aes(color = dat[,3], fill = dat[,3]), geom = "polygon", alpha = 0.2, position = "identity") +
#geom_point(aes(color = Sample, fill = Sample), size=3) +
scale_x_continuous(limits = c(-0.1, 2.5)) +
scale_y_continuous(limits = c(0, 2.5))
sepsi <- readRDS("sepsi_totale.RDS")
DimPlot(sepsi)
mac <- readRDS("sepsi_macrophages.RDS")
DimPlot(mac)
head(mac@meta.data)
mac$integrated_snn_res.0.4 <- NULL
mac$integrated_snn_res.0.3 <- NULL
mac$integrated_snn_res.0.1 <- NULL
head(mac@meta.data)
FeaturePlot(mac, c("Cd209a", "Clec9a"))
DefaultAssay(mac) <- "RNA"
FeaturePlot(mac, c("Cd209a", "Clec9a"))
T)
FeaturePlot(mac, c("Cd209a", "Clec9a"), order = T)
FeaturePlot(mac, c("Cd209a", "Clec9a", "Siglech"), order = T)
